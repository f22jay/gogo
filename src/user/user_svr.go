package user

import (
	"bytes"
	"common"
	"encoding/gob"
	"log"
	"rpc"
)

// UserSvr logic impl
type UserSvr struct{}

// GetByName get uesr by name
func (*UserSvr) GetByName(req *GetByNameReq, rsp *GetByNameRsp) int {
	userItem := &rsp.UserItem
	db := common.GetDb()
	row := db.QueryRow("select username, nickname, profile from users where username = ? ",
		req.Username)
	if err := row.Scan(&userItem.Username, &userItem.Nickname, &userItem.Profile); err != nil {
		log.Printf("scan failed, err:%v", err)
		return common.ErrDB
	}
	if userItem.Username == "" {
		log.Println(req, rsp)
	}
	return 0
}

// UpdateByName get uesr by name
func (*UserSvr) UpdateByName(req *UpdateByNameReq, rsp *UpdateByNameRsp) int {
	item := &req.UserItem
	if item.Username == "" || item.Nickname == "" || item.Profile == "" {
		return common.ErrArg
	}
	db := common.GetDb()
	result, err := db.Exec("UPDATE users set nickname=? , profile = ? where username=?",
		req.UserItem.Nickname, req.UserItem.Profile, req.UserItem.Username)
	if err != nil {
		log.Printf("Update failed,err:%v", err)
		return common.ErrDB
	}
	rowsaffected, err := result.RowsAffected()
	if err != nil || rowsaffected != 1 {
		log.Printf("failed, RowsAffected:%d err:%v", rowsaffected, err)
		return common.ErrArg
	}
	// here should use redis, but found that this redis lib dose not use conection pool,
	// not useful to bench test
	return 0
}

// Dispatcher req, dispatcher shoud be generated by code
func (u *UserSvr) Dispatcher(req *rpc.RequestPkg) (rsp *rpc.ResponsePkg) {
	rsp = new(rpc.ResponsePkg)
	if req.FuncName == "GetByName" {
		buf := new(bytes.Buffer)
		buf.Write(req.ReqBuf)
		dec := gob.NewDecoder(buf)
		getReq := new(GetByNameReq)
		err := dec.Decode(getReq)
		if err != nil {
			rsp.RetCode = rpc.PkgDecodeErr
			log.Println(err)
			return
		}

		getRsp := new(GetByNameRsp)
		ret := u.GetByName(getReq, getRsp)

		// set rsp pkg
		rsp.RequestID = req.RequestID
		rsp.SvrName = req.SvrName
		rsp.FuncName = req.FuncName
		rsp.RetCode = int32(ret)

		// encode rsp pkg
		buf = new(bytes.Buffer)
		enc := gob.NewEncoder(buf)
		err = enc.Encode(getRsp)
		if err != nil {
			rsp.RetCode = rpc.PkgEncodeErr
			log.Println(err, getRsp)
		}
		rsp.RspBuf = buf.Bytes()
	}

	if req.FuncName == "UpdateByName" {
		buf := new(bytes.Buffer)
		buf.Write(req.ReqBuf)
		dec := gob.NewDecoder(buf)
		updateReq := new(UpdateByNameReq)
		err := dec.Decode(updateReq)
		if err != nil {
			rsp.RetCode = rpc.PkgDecodeErr
			log.Println(err)
			return
		}

		updateRsp := new(UpdateByNameRsp)
		ret := u.UpdateByName(updateReq, updateRsp)

		// set rsp pkg
		rsp.RequestID = req.RequestID
		rsp.SvrName = req.SvrName
		rsp.FuncName = req.FuncName
		rsp.RetCode = int32(ret)

		// encode rsp pkg
		buf = new(bytes.Buffer)
		enc := gob.NewEncoder(buf)
		err = enc.Encode(updateRsp)
		if err != nil {
			rsp.RetCode = rpc.PkgEncodeErr
			log.Println(err, updateRsp)
		}
		rsp.RspBuf = buf.Bytes()
	}

	return
}
